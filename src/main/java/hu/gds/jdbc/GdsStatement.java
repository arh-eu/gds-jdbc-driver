package hu.gds.jdbc;

import hu.arheu.gds.message.data.ConsistencyType;
import hu.arheu.gds.message.data.MessageData11QueryRequestAck;
import hu.gds.jdbc.resultset.DQLResultSet;
import hu.gds.jdbc.resultset.AbstractGdsResultSet;
import org.jetbrains.annotations.NotNull;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;

import static java.lang.Math.max;

public class GdsStatement extends GdsBaseStatement {

    GdsStatement(@NotNull GdsJdbcConnection connection) {
        super(connection);
    }

    public ResultSet executeInnerQuery(@NotNull String sql) throws SQLException {
        executeInner(sql, false, ConsistencyType.NONE);
        if (currentResultSet == null) {
            throw new SQLException("No result set");
        }
        return currentResultSet;
    }

    @Override
    public ResultSet executeQuery(@NotNull String sql) throws SQLException {
        executeInner(sql, false, ConsistencyType.PAGES);
        if (currentResultSet == null) {
            throw new SQLException("No result set");
        }
        return currentResultSet;
    }

    AbstractGdsResultSet executeMetaQuery(@NotNull MessageData11QueryRequestAck queryResponse) throws SQLException {
        checkClosed(false);
        try {
            DQLResultSet resultSet = new DQLResultSet(queryResponse, "", this);
            setNewResultSet(resultSet);
            return resultSet;
        } catch (Throwable t) {
            throw new SQLException(t.getMessage(), t);
        }
    }

    @Override
    public int executeUpdate(@NotNull String sql) throws SQLException {
        executeInner(sql, true, ConsistencyType.PAGES);
        return max(0, getUpdateCount());
    }

    @Override
    public boolean execute(@NotNull String sql) throws SQLException {
        return executeInner(sql, false, ConsistencyType.PAGES);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public void clearWarnings() throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }
}
